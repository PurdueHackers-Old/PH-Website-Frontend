{"ast":null,"code":"import ReactGA from 'react-ga';\nimport { decode } from 'jsonwebtoken';\nimport { api } from '../../utils';\nimport { setCookie, removeCookie, getToken } from '../../utils/session';\nimport * as flash from '../../utils/flash';\nimport { setToken, setUser, setGreenFlash, setRedFlash } from '../creators'; // Auth Actions\n\nexport const signUp = body => async dispatch => {\n  try {\n    const {\n      data: {\n        response\n      }\n    } = await api.post('/auth/signup', body);\n    dispatch(setToken(response.token));\n    dispatch(setUser(response.user));\n    setCookie('token', response.token);\n    const resp = response;\n    return resp;\n  } catch (error) {\n    throw error.response ? error.response.data : error;\n  }\n};\nexport const signIn = body => async dispatch => {\n  try {\n    const {\n      data: {\n        response\n      }\n    } = await api.post('/auth/login', body);\n    dispatch(setToken(response.token));\n    dispatch(setUser(response.user));\n    const tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\n    const nextYear = new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n    setCookie('token', response.token, null, {\n      expires: !body.rememberMe ? tomorrow : nextYear\n    });\n    ReactGA.set({\n      userId: response.user._id\n    });\n    const resp = response;\n    return resp;\n  } catch (error) {\n    throw error.response ? error.response.data : error;\n  }\n};\nexport const signOut = ctx => async dispatch => {\n  try {\n    dispatch(setToken(''));\n    dispatch(setUser(null));\n    removeCookie('token', ctx);\n    ReactGA.set({\n      userId: null\n    });\n  } catch (error) {\n    throw error;\n  }\n}; // Should only be called in the \"server-side\" context in _app.tsx\n// Takes token from cookie and populates redux store w/ token and user object\n\nexport const refreshSession = ctx => async dispatch => {\n  try {\n    if (ctx && ctx.res && ctx.res.headersSent) return;\n    const token = getToken(ctx);\n\n    if (!token) {\n      dispatch(setUser(null));\n      dispatch(setToken(''));\n      removeCookie('token', ctx);\n      ReactGA.set({\n        userId: null\n      });\n      return null;\n    }\n\n    const {\n      data: {\n        response\n      }\n    } = await api.get('/auth/me', {\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      }\n    });\n    dispatch(setUser(response.user));\n    dispatch(setToken(response.token));\n    setCookie('token', response.token, ctx);\n    ReactGA.set({\n      userId: response.user._id\n    });\n    return response;\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    dispatch(setUser(null));\n    dispatch(setToken(''));\n    removeCookie('token', ctx);\n    ReactGA.set({\n      userId: null\n    });\n    return null;\n  }\n}; // User actions\n\nexport const updateProfile = (body, ctx, id) => async dispatch => {\n  try {\n    const token = getToken(ctx);\n    if (!id) id = decode(token)._id;\n    const {\n      data: {\n        response\n      }\n    } = await api.put(\"/users/\".concat(id), body, {\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      }\n    });\n    const user = response;\n    dispatch(setUser(user));\n    return user;\n  } catch (error) {\n    throw error.response ? error.response.data : error;\n  }\n}; // Flash Actions\n\nexport const sendErrorMessage = (msg, ctx) => dispatch => {\n  dispatch(setRedFlash(msg));\n  flash.set({\n    red: msg\n  }, ctx);\n};\nexport const sendSuccessMessage = (msg, ctx) => dispatch => {\n  dispatch(setGreenFlash(msg));\n  flash.set({\n    green: msg\n  }, ctx);\n};\nexport const clearFlashMessages = ctx => dispatch => {\n  dispatch(setGreenFlash(''));\n  dispatch(setRedFlash(''));\n  removeCookie('flash', ctx);\n};","map":{"version":3,"sources":["/Users/ashwin/Projects/PH-Website-Frontend/src/redux/actions/index.ts"],"names":["ReactGA","decode","api","setCookie","removeCookie","getToken","flash","setToken","setUser","setGreenFlash","setRedFlash","signUp","body","dispatch","data","response","post","token","user","resp","error","signIn","tomorrow","Date","getTime","nextYear","setFullYear","getFullYear","expires","rememberMe","set","userId","_id","signOut","ctx","refreshSession","res","headersSent","get","headers","Authorization","console","updateProfile","id","put","sendErrorMessage","msg","red","sendSuccessMessage","green","clearFlashMessages"],"mappings":"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","sourcesContent":["import ReactGA from 'react-ga';\nimport { Dispatch } from 'redux';\nimport { decode } from 'jsonwebtoken';\nimport {\n\tCreateUserRequest,\n\tLoginRequest,\n\tLoginResponse,\n\tContext,\n\tMember,\n\tStoreState\n} from '../../@types';\nimport { api } from '../../utils';\nimport { setCookie, removeCookie, getToken } from '../../utils/session';\nimport * as flash from '../../utils/flash';\nimport {\n\tsetToken,\n\tsetUser,\n\tsetGreenFlash,\n\tsetRedFlash,\n\tSetToken,\n\tSetUser,\n\tSetRedFlash,\n\tSetGreenFlash\n} from '../creators';\n\n// Auth Actions\nexport const signUp = (body: CreateUserRequest) => async (\n\tdispatch: Dispatch<SetToken | SetUser>\n) => {\n\ttry {\n\t\tconst {\n\t\t\tdata: { response }\n\t\t} = await api.post('/auth/signup', body);\n\t\tdispatch(setToken(response.token));\n\t\tdispatch(setUser(response.user));\n\t\tsetCookie('token', response.token);\n\t\tconst resp: LoginResponse = response;\n\t\treturn resp;\n\t} catch (error) {\n\t\tthrow error.response ? error.response.data : error;\n\t}\n};\n\nexport const signIn = (body: LoginRequest) => async (dispatch: Dispatch<SetToken | SetUser>) => {\n\ttry {\n\t\tconst {\n\t\t\tdata: { response }\n\t\t} = await api.post('/auth/login', body);\n\t\tdispatch(setToken(response.token));\n\t\tdispatch(setUser(response.user));\n\t\tconst tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\n\t\tconst nextYear = new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n\t\tsetCookie('token', response.token, null, {\n\t\t\texpires: !body.rememberMe ? tomorrow : nextYear\n\t\t});\n\t\tReactGA.set({ userId: response.user._id });\n\t\tconst resp: LoginResponse = response;\n\t\treturn resp;\n\t} catch (error) {\n\t\tthrow error.response ? error.response.data : error;\n\t}\n};\n\nexport const signOut = (ctx?: Context) => async (dispatch: Dispatch<SetToken | SetUser>) => {\n\ttry {\n\t\tdispatch(setToken(''));\n\t\tdispatch(setUser(null));\n\t\tremoveCookie('token', ctx);\n\t\tReactGA.set({ userId: null });\n\t} catch (error) {\n\t\tthrow error;\n\t}\n};\n\n// Should only be called in the \"server-side\" context in _app.tsx\n// Takes token from cookie and populates redux store w/ token and user object\nexport const refreshSession = (ctx?: Context) => async (dispatch: Dispatch<SetToken | SetUser>) => {\n\ttry {\n\t\tif (ctx && ctx.res && ctx.res.headersSent) return;\n\t\tconst token = getToken(ctx);\n\t\tif (!token) {\n\t\t\tdispatch(setUser(null));\n\t\t\tdispatch(setToken(''));\n\t\t\tremoveCookie('token', ctx);\n\t\t\tReactGA.set({ userId: null });\n\t\t\treturn null;\n\t\t}\n\t\tconst {\n\t\t\tdata: { response }\n\t\t} = await api.get('/auth/me', {\n\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t});\n\n\t\tdispatch(setUser(response.user));\n\t\tdispatch(setToken(response.token));\n\t\tsetCookie('token', response.token, ctx);\n\t\tReactGA.set({ userId: response.user._id });\n\t\treturn response;\n\t} catch (error) {\n\t\tconsole.error('Error refreshing token:', error);\n\t\tdispatch(setUser(null));\n\t\tdispatch(setToken(''));\n\t\tremoveCookie('token', ctx);\n\t\tReactGA.set({ userId: null });\n\t\treturn null;\n\t}\n};\n\n// User actions\nexport const updateProfile = (body: { name: string }, ctx?: Context, id?: string) => async (\n\tdispatch: Dispatch<SetToken | SetUser>\n) => {\n\ttry {\n\t\tconst token = getToken(ctx);\n\t\tif (!id) id = (decode(token) as any)._id;\n\t\tconst {\n\t\t\tdata: { response }\n\t\t} = await api.put(`/users/${id}`, body, {\n\t\t\theaders: { Authorization: `Bearer ${token}` }\n\t\t});\n\t\tconst user: Member = response;\n\t\tdispatch(setUser(user));\n\t\treturn user;\n\t} catch (error) {\n\t\tthrow error.response ? error.response.data : error;\n\t}\n};\n\n// Flash Actions\nexport const sendErrorMessage = (msg: string, ctx?: Context) => (\n\tdispatch: Dispatch<SetRedFlash>\n) => {\n\tdispatch(setRedFlash(msg));\n\tflash.set({ red: msg }, ctx);\n};\n\nexport const sendSuccessMessage = (msg: string, ctx?: Context) => (\n\tdispatch: Dispatch<SetGreenFlash>\n) => {\n\tdispatch(setGreenFlash(msg));\n\tflash.set({ green: msg }, ctx);\n};\n\nexport const clearFlashMessages = (ctx?: Context) => (\n\tdispatch: Dispatch<SetGreenFlash | SetRedFlash>\n) => {\n\tdispatch(setGreenFlash(''));\n\tdispatch(setRedFlash(''));\n\tremoveCookie('flash', ctx);\n};\n"]},"metadata":{},"sourceType":"module"}
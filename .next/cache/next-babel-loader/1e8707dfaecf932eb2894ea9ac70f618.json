{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport thunk from 'redux-thunk';\nimport getConfig from 'next/config';\nimport rootReducer from '../reducers';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst middleware = [thunk];\n\nif (publicRuntimeConfig.NODE_ENV !== 'production') {\n  const {\n    createLogger\n  } = require('redux-logger');\n\n  middleware.push(createLogger());\n}\n\nconst enhancer = publicRuntimeConfig.NODE_ENV !== 'production' ? composeWithDevTools(applyMiddleware(...middleware)) : compose(applyMiddleware(...middleware));\nexport default ((initialState, options) => {\n  return createStore(rootReducer, initialState, enhancer);\n});","map":{"version":3,"sources":["/Users/ashwin/Projects/PH-Website-Frontend/src/redux/store/client.ts"],"names":["createStore","applyMiddleware","compose","composeWithDevTools","thunk","getConfig","rootReducer","publicRuntimeConfig","middleware","NODE_ENV","createLogger","require","push","enhancer","initialState","options"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,8CAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BF,SAAS,EAAzC;AAEA,MAAMG,UAAiB,GAAG,CAACJ,KAAD,CAA1B;;AAEA,IAAIG,mBAAmB,CAACE,QAApB,KAAiC,YAArC,EAAmD;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAmBC,OAAO,CAAC,cAAD,CAAhC;;AACAH,EAAAA,UAAU,CAACI,IAAX,CAAgBF,YAAY,EAA5B;AACA;;AAED,MAAMG,QAAQ,GACbN,mBAAmB,CAACE,QAApB,KAAiC,YAAjC,GACGN,mBAAmB,CAACF,eAAe,CAAC,GAAGO,UAAJ,CAAhB,CADtB,GAEGN,OAAO,CAACD,eAAe,CAAC,GAAGO,UAAJ,CAAhB,CAHX;AAKA,gBAAe,CAACM,YAAD,EAAeC,OAAf,KAA2B;AACzC,SAAOf,WAAW,CAACM,WAAD,EAAcQ,YAAd,EAA4BD,QAA5B,CAAlB;AACA,CAFD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport thunk from 'redux-thunk';\nimport getConfig from 'next/config';\nimport rootReducer from '../reducers';\nconst { publicRuntimeConfig } = getConfig();\n\nconst middleware: any[] = [thunk];\n\nif (publicRuntimeConfig.NODE_ENV !== 'production') {\n\tconst { createLogger } = require('redux-logger');\n\tmiddleware.push(createLogger());\n}\n\nconst enhancer =\n\tpublicRuntimeConfig.NODE_ENV !== 'production'\n\t\t? composeWithDevTools(applyMiddleware(...middleware))\n\t\t: compose(applyMiddleware(...middleware));\n\nexport default (initialState, options) => {\n\treturn createStore(rootReducer, initialState, enhancer);\n};\n"]},"metadata":{},"sourceType":"module"}